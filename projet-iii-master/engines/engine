#!/usr/bin/env python3

import os
from http import HTTPStatus
from optparse import OptionParser

from src.log import setLogger, without_logging
from src.server import run_server
from src.routes import Route
from src.db import setDB

parser = OptionParser("usage: engine [options] ENGINE")

parser.add_option("-r", "--release", dest="release",
                  help="release mode", action="store_true", default=False)

parser.add_option("-p", "--port", dest="port",
                  help="HTTP port to use", type="int", default=80)

parser.add_option("-l", "--log-dir", dest="log_dir",
                  help="set log directory", type="string",
                  default="/var/bixi-engines/log")

parser.add_option("-a", "--auth-dir", dest="auth_dir",
                  help="set authencation directory", type="string",
                  default="/srv/www/auth")

parser.add_option("-d", "--db", dest="database",
                  help="set database path", type="string",
                  default="/var/db/bixi")

def main():

    (options, args) = parser.parse_args()

    if len(args) < 1:
        parser.print_usage()
        os.sys.exit(1)

    engine = args[0]

    log_prefix = f"{options.log_dir}/engine-{engine}"

    setLogger(log_prefix, engine, options.release)
    setDB(options.database)

    Route.set_auth_path(options.auth_dir)

    __import__(f"src.engine_{engine}")

    def do_logging_route(response, path, last_byte):

        last_byte = int(last_byte)

        with open(path, "r") as log:

            lines = []
            is_graph = False

            log.seek(0, os.SEEK_END)

            if log.tell() == last_byte:
                return HTTPStatus.NO_CONTENT

            log.seek(last_byte, os.SEEK_SET)

            line = log.readline()

            if "bixi-graph:" in line:
                is_graph = True

            lines.append(line)

            total = len(line)

            while True:

                line = log.readline()

                if not line:
                    break

                is_this_graph = "bixi-graph:" in line

                if is_this_graph == is_graph:
                    lines.append(line)
                    total += len(line)
                else:
                    break

            response["body"] = {
                "nbrOctets": total,
                "texte"    : not is_graph,
                "blocks"   : lines
            }

        return HTTPStatus.OK

    # pylint: disable=unused-variable
    @Route.auth(["admin"])
    @Route.get(f"/logs/{engine}/<last_byte:int>")
    @Route.divert_log()
    @without_logging
    def make_logging_route_today(response, last_byte):
        return do_logging_route(response, log_prefix, last_byte)

    @Route.auth(["admin"])
    @Route.get(f"/logs/{engine}/<date:date-iso>/<last_byte:int>")
    @Route.divert_log()
    @without_logging
    def make_logging_route(response, date, last_byte):
        return do_logging_route(response, f"{log_prefix}.{date}", last_byte)

    run_server(port=options.port, module=f"engine-{engine}")

if __name__ == "__main__":
    main()
